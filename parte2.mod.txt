/*Declaración de sets y parámteros*/
set PARADAS;
set ALUMNOS;

param costes {i in PARADAS, j in PARADAS};
param asignaciones {i in ALUMNOS, j in PARADAS};
param hermanos {i in ALUMNOS, j in ALUMNOS};
param personas_total;
param capacidad_bus;

/*Variables de decisión*/
var alumnos_paradas {i in ALUMNOS, j in PARADAS} binary;
var destinos {i in PARADAS, j in PARADAS} binary;
var flujo {i in PARADAS, j in PARADAS} integer, >= 0;

/*Función objetivo*/
minimize Profit: sum{i in PARADAS, j in PARADAS} (costes[i, j]*destinos[i,j]*5) + (sum{i in PARADAS} destinos["PARKING", i]*120);

/*Restricciones*/
#A cada parada llega 1 ruta.
s.t. Llegadas_S1 : sum{i in PARADAS} destinos[i, "S1"] <= 1;
s.t. Llegadas_S2 : sum{i in PARADAS} destinos[i, "S2"] <= 1;
s.t. Llegadas_S3 : sum{i in PARADAS} destinos[i, "S3"] <= 1;

#De cada parada sale sólo 1 ruta.
s.t. Salidas_S1 : sum{i in PARADAS} destinos["S1", i] <= 1;
s.t. Salidas_S2 : sum{i in PARADAS} destinos["S2", i] <= 1;
s.t. Salidas_S3 : sum{i in PARADAS} destinos["S3", i] <= 1;

#El número de rutas no supera el número de autobuses.
s.t. Autobuses : sum{i in PARADAS} destinos["PARKING", i] <= 3;

#Todas las rutas salen del parking y llegan al colegio.
s.t. Rutas_totales : sum{i in PARADAS} destinos["PARKING", i] = sum{i in PARADAS} destinos[i, "COLEGIO"];

#No se puede superar la capacidad del autobus al salir de una parada.
s.t. Capacidad_S1 : sum{i in PARADAS} flujo[i, "S1"] <= capacidad_bus;
s.t. Capacidad_S2 : sum{i in PARADAS} flujo[i, "S2"] <= capacidad_bus;
s.t. Capacidad_S3 : sum{i in PARADAS} flujo[i, "S3"] <= capacidad_bus;

#Llegan 8 alumnos al colegio.
s.t. Alumnos_llegada : sum{i in PARADAS} flujo[i, "COLEGIO"] = personas_total;

#Debe salir mínimo un autobus.
s.t. Min_autobus : sum{i in PARADAS} destinos["PARKING", i] >= 1;

#No se pueden repetir paradas. (Se evitan los bucles).
s.t. Bucle_P_S1 : destinos["PARKING", "S1"] + destinos["S1", "PARKING"] <= 1;
s.t. Bucle_P_S2 : destinos["PARKING", "S2"] + destinos["S2", "PARKING"] <= 1;
s.t. Bucle_P_S3 : destinos["PARKING", "S3"] + destinos["S3", "PARKING"] <= 1;
s.t. Bucle_P_COL : destinos["PARKING", "COLEGIO"] + destinos["COLEGIO", "PARKING"] <= 1;

s.t. Bucle_S1_S2 : destinos["S1", "S2"] + destinos["S2", "S1"] <= 1;
s.t. Bucle_S1_S3 : destinos["S1", "S3"] + destinos["S3", "S1"] <= 1;
s.t. Bucle_S1_COL : destinos["S1", "COLEGIO"] + destinos["COLEGIO", "S1"] <= 1;

s.t. Bucle_S2_S3 : destinos["S2", "S3"] + destinos["S3", "S2"] <= 1;
s.t. Bucle_S2_COL : destinos["S2", "COLEGIO"] + destinos["COLEGIO", "S2"] <= 1;

s.t. Bucle_S3_COL : destinos["S3", "COLEGIO"] + destinos["COLEGIO", "S3"] <= 1;

#Ninguna parada es el punto origen de una ruta.
s.t. No_origen_S1: sum{i in PARADAS} destinos["S1", i] - sum{i in PARADAS} destinos[i, "S1"] = 0;
s.t. No_origen_S2: sum{i in PARADAS} destinos["S2", i] - sum{i in PARADAS} destinos[i, "S2"] = 0;
s.t. No_origen_S3: sum{i in PARADAS} destinos["S3", i] - sum{i in PARADAS} destinos[i, "S3"] = 0;

#Del colegio no se llevan alumnos a otras paradas.
s.t. Colegio_no_salen : sum{i in PARADAS} flujo["COLEGIO", i] = 0;

/*La restricción a continuación engloba las restricciones 13 y 14 de la 
modelización del ejercicio dos que se encuentra en la memoria*/

#Control de flujo entre paradas. (Restringimos para que la matriz de flujo tenga valores coherentes).
s.t. Flujo_S1_S1 : flujo["S1", "S1"] <= destinos["S1", "S1"] * 69;
s.t. Flujo_S1_S1_2 : destinos["S1", "S1"] <= flujo["S1", "S1"];

s.t. Flujo_S1_S2 : flujo["S1", "S2"] <= destinos["S1", "S2"] * 69;
s.t. Flujo_S1_S2_2 : destinos["S1", "S2"] <= flujo["S1", "S2"];

s.t. Flujo_S1_S3 : flujo["S1", "S3"] <= destinos["S1", "S3"] * 69;
s.t. Flujo_S1_S3_2 : destinos["S1", "S3"] <= flujo["S1", "S3"];

s.t. Flujo_S1_COL : flujo["S1", "COLEGIO"] <= destinos["S1", "COLEGIO"] * 69;

s.t. Flujo_S2_S1 : flujo["S2", "S1"] <= destinos["S2", "S1"] * 69;
s.t. Flujo_S2_S1_2 : destinos["S2", "S1"] <= flujo["S2", "S1"];

s.t. Flujo_S2_S2 : flujo["S2", "S2"] <= destinos["S2", "S2"] * 69;
s.t. Flujo_S2_S2_2 : destinos["S2", "S2"] <= flujo["S2", "S2"];

s.t. Flujo_S2_S3 : flujo["S2", "S3"] <= destinos["S2", "S3"] * 69;
s.t. Flujo_S2_S3_2 : destinos["S2", "S3"] <= flujo["S2", "S3"];

s.t. Flujo_S2_COL : flujo["S2", "COLEGIO"] <= destinos["S2", "COLEGIO"] * 69;

s.t. Flujo_S3_S1 : flujo["S3", "S1"] <= destinos["S3", "S1"] * 69;
s.t. Flujo_S3_S1_2 : destinos["S3", "S1"] <= flujo["S3", "S1"];

s.t. Flujo_S3_S2 : flujo["S3", "S2"] <= destinos["S3", "S2"] * 69;
s.t. Flujo_S3_S2_2 : destinos["S3", "S2"] <= flujo["S3", "S2"];

s.t. Flujo_S3_S3 : flujo["S3", "S3"] <= destinos["S3", "S3"] * 69;
s.t. Flujo_S3_S3_2 : destinos["S3", "S3"] <= flujo["S3", "S3"];

s.t. Flujo_S3_COL : flujo["S3", "COLEGIO"] <= destinos["S3", "COLEGIO"] * 69;

#No se puede ir del parking al colegio directamente.
s.t. No_parking_colegio : flujo["PARKING", "COLEGIO"] = 0;

#Máximo 4 personas por parada.
s.t. Max4_S1 : sum{i in ALUMNOS} alumnos_paradas[i, "S1"] <= 4;
s.t. Max4_S2 : sum{i in ALUMNOS} alumnos_paradas[i, "S2"] <= 4;
s.t. Max4_S3 : sum{i in ALUMNOS} alumnos_paradas[i, "S3"] <= 4;

#8 personas en total en las paradas.
s.t. Personas_esperando : (sum{i in ALUMNOS} alumnos_paradas[i, "S1"]) + (sum{i in ALUMNOS} alumnos_paradas[i, "S2"]) + (sum{i in ALUMNOS} alumnos_paradas[i, "S3"]) = 8;

#Las personas recogidas en la primera parada deben ser los que esperaban en ella.
s.t. Recogidos_P : flujo["PARKING", "PARKING"] <= sum{i in ALUMNOS} alumnos_paradas[i, "PARKING"];
s.t. Recogidos_S1 : flujo["PARKING", "S1"] <= sum{i in ALUMNOS} alumnos_paradas[i, "S1"];
s.t. Recogidos_S2 : flujo["PARKING", "S2"] <= sum{i in ALUMNOS} alumnos_paradas[i, "S2"];
s.t. Recogidos_S3 : flujo["PARKING", "S3"] <= sum{i in ALUMNOS} alumnos_paradas[i, "S3"];

/* La siguiente restricción engloba a las restricciones 17 y 18 de la 
modelización del ejercicio 2 implantada en la memoria*/

#Se establecen dos acotaciones para el flujo de las primeras paradas.
s.t. Acotacion1_P : destinos["PARKING", "PARKING"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "PARKING"]) - flujo["PARKING", "PARKING"] <= 10;
s.t. Acotacion1_S1 : destinos["PARKING", "S1"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S1"]) - flujo["PARKING", "S1"] <= 10;
s.t. Acotacion1_S2 : destinos["PARKING", "S2"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S2"]) - flujo["PARKING", "S2"] <= 10;
s.t. Acotacion1_S3 : destinos["PARKING", "S3"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S3"]) - flujo["PARKING", "S3"] <= 10;

s.t. Acotacion2_P : flujo["PARKING", "PARKING"] <= destinos["PARKING", "PARKING"]*69;
s.t. Acotacion2_S1 : flujo["PARKING", "S1"] <= destinos["PARKING", "S1"]*69;
s.t. Acotacion2_S2 : flujo["PARKING", "S2"] <= destinos["PARKING", "S2"]*69;
s.t. Acotacion2_S3 : flujo["PARKING", "S3"] <= destinos["PARKING", "S3"]*69;

#Los alumnos que salen de una parada deben ser los que entran mas los que estaban esperando.
s.t. Salen_S1_S1 : destinos["S1", "S1"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S1"]) + (sum{i in PARADAS} flujo[i, "S1"]) - flujo["S1", "S1"] <= 10;
s.t. Salen_S1_S2 : destinos["S1", "S2"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S2"]) + (sum{i in PARADAS} flujo[i, "S1"]) - flujo["S1", "S2"] <= 10;
s.t. Salen_S1_S3 : destinos["S1", "S3"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S3"]) + (sum{i in PARADAS} flujo[i, "S1"]) - flujo["S1", "S3"] <= 10;

s.t. Salen_S2_S1 : destinos["S2", "S1"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S1"]) + (sum{i in PARADAS} flujo[i, "S2"]) - flujo["S2", "S1"] <= 10;
s.t. Salen_S2_S2 : destinos["S2", "S2"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S2"]) + (sum{i in PARADAS} flujo[i, "S2"]) - flujo["S2", "S2"] <= 10;
s.t. Salen_S2_S3 : destinos["S2", "S3"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S3"]) + (sum{i in PARADAS} flujo[i, "S2"]) - flujo["S2", "S3"] <= 10;

s.t. Salen_S3_S1 : destinos["S3", "S1"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S1"]) + (sum{i in PARADAS} flujo[i, "S3"]) - flujo["S3", "S1"] <= 10;
s.t. Salen_S3_S2 : destinos["S3", "S2"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S2"]) + (sum{i in PARADAS} flujo[i, "S3"]) - flujo["S3", "S2"] <= 10;
s.t. Salen_S3_S3 : destinos["S3", "S3"]*10 + (sum{i in ALUMNOS} alumnos_paradas[i, "S3"]) + (sum{i in PARADAS} flujo[i, "S3"]) - flujo["S3", "S3"] <= 10;

#Cada bus lleva solo los alumnos que tenia en la parada anterior al colegio.
s.t. Alumnos_S1_COLEGIO : flujo["S1", "COLEGIO"] <= sum{i in PARADAS} flujo[i, "S1"];
s.t. Alumnos_S2COLEGIO : flujo["S2", "COLEGIO"] <= sum{i in PARADAS} flujo[i, "S2"];
s.t. Alumnos_S3_COLEGIO : flujo["S3", "COLEGIO"] <= sum{i in PARADAS} flujo[i, "S3"];

#Cada alumno va solo a las paradas donde están asignados.
s.t. Paradas_A1 : (asignaciones["A1", "S1"]*alumnos_paradas["A1", "S1"]) + (asignaciones["A1", "S2"]*alumnos_paradas["A1", "S2"]) + (asignaciones["A1", "S3"]*alumnos_paradas["A1", "S3"]) = 1;
s.t. Paradas_A2 : (asignaciones["A2", "S1"]*alumnos_paradas["A2", "S1"]) + (asignaciones["A2", "S2"]*alumnos_paradas["A2", "S2"]) + (asignaciones["A2", "S3"]*alumnos_paradas["A2", "S3"]) = 1;
s.t. Paradas_A3 : (asignaciones["A3", "S1"]*alumnos_paradas["A3", "S1"]) + (asignaciones["A3", "S2"]*alumnos_paradas["A3", "S2"]) + (asignaciones["A3", "S3"]*alumnos_paradas["A3", "S3"]) = 1;
s.t. Paradas_A4 : (asignaciones["A4", "S1"]*alumnos_paradas["A4", "S1"]) + (asignaciones["A4", "S2"]*alumnos_paradas["A4", "S2"]) + (asignaciones["A4", "S3"]*alumnos_paradas["A4", "S3"]) = 1;
s.t. Paradas_A5 : (asignaciones["A5", "S1"]*alumnos_paradas["A5", "S1"]) + (asignaciones["A5", "S2"]*alumnos_paradas["A5", "S2"]) + (asignaciones["A5", "S3"]*alumnos_paradas["A5", "S3"]) = 1;
s.t. Paradas_A6 : (asignaciones["A6", "S1"]*alumnos_paradas["A6", "S1"]) + (asignaciones["A6", "S2"]*alumnos_paradas["A6", "S2"]) + (asignaciones["A6", "S3"]*alumnos_paradas["A6", "S3"]) = 1;
s.t. Paradas_A7 : (asignaciones["A7", "S1"]*alumnos_paradas["A7", "S1"]) + (asignaciones["A7", "S2"]*alumnos_paradas["A7", "S2"]) + (asignaciones["A7", "S3"]*alumnos_paradas["A7", "S3"]) = 1;
s.t. Paradas_A8 : (asignaciones["A8", "S1"]*alumnos_paradas["A8", "S1"]) + (asignaciones["A8", "S2"]*alumnos_paradas["A8", "S2"]) + (asignaciones["A8", "S3"]*alumnos_paradas["A8", "S3"]) = 1;

#Cada alumno debe ir a la misma parada que su herman@.
s.t. Hermanos {i in ALUMNOS, j in ALUMNOS, k in PARADAS} :  (alumnos_paradas[i,k] - alumnos_paradas[j,k]) * hermanos[i,j] = 0;
